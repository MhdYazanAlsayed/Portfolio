/**
 * Starfield مطوّر:
 * - حركة تلقائية (drift) + بارالاكس لطيف
 * - عند تحريك الماوس: نبضة Warp + Swirl حول المؤشر (تتلاشى تدريجيًا)
 */

class Starfield {
  constructor(canvas, opts) {
    this.canvas = canvas;
    this.ctx = canvas.getContext("2d");
    this.count = opts.count ?? 400;
    this.speed = opts.speed ?? 0.02; // سرعة الانجراف التلقائي
    this.parallax = opts.parallax ?? 0.05; // عمق البارالاكس
    this.sizeRange = opts.sizeRange ?? [0.5, 1.8];
    this.twinkle = opts.twinkle ?? 0.15;

    this.vw = innerWidth;
    this.vh = innerHeight;
    this.dpr = Math.min(devicePixelRatio || 1, 1.8);

    // حالة الماوس والنبضة
    this.mx = this.vw / 2;
    this.my = this.vh / 2; // موضع ماوس مُخفف
    this.tx = this.mx;
    this.ty = this.my; // هدف الماوس
    this.pulse = 0; // شدة النبضة (0..1)
    this.px = this.mx;
    this.py = this.my; // مركز النبضة
    this.pulseRadius = Math.min(this.vw, this.vh) * 0.55;

    this.stars = [];
    this.resize();
    this.init();

    this._raf = null;
    this._hidden = false;
    this._last = performance.now();

    addEventListener("resize", () => this.onResize());
addEventListener("pointermove", (e) => {
  this.tx = e.clientX; this.ty = e.clientY;
  this.px = e.clientX; this.py = e.clientY;
  this.pulse = Math.min(1, this.pulse + 0.35);  // بدل =1
}, { passive:true });
  }

  rand(min, max) {
    return Math.random() * (max - min) + min;
  }

init(){
  const { vw, vh } = this;
  this.stars = Array.from({ length: this.count }, () => {
    const z = Math.random();
    const base = 40; // عدّلها حسب الذوق
    const spd = (0.4 + 1.2 * (1 - z)) * this.speed * base;
    const ang = Math.random() * Math.PI * 2;
    return {
      x: Math.random()*vw,
      y: Math.random()*vh,
      z,
      r: this.rand(this.sizeRange[0], this.sizeRange[1]),
      a: this.rand(0.4, 0.95),
      phi: Math.random()*Math.PI*2,
      vx: Math.cos(ang) * spd,
      vy: Math.sin(ang) * spd,
    };
  });
}

  resize() {
    const { canvas, ctx } = this;
    this.vw = innerWidth;
    this.vh = innerHeight;
    const d = this.dpr;
    canvas.width = this.vw * d;
    canvas.height = this.vh * d;
    canvas.style.width = this.vw + "px";
    canvas.style.height = this.vh + "px";
    ctx.setTransform(d, 0, 0, d, 0, 0);
    this.pulseRadius = Math.min(this.vw, this.vh) * 0.55;
  }
  onResize() {
    this.resize();
  }

  lerp(a, b, t) {
    return a + (b - a) * t;
  }

draw(now){
  const { ctx, vw, vh, stars } = this;
  ctx.clearRect(0,0,vw,vh);

  // dt طبيعي لتنعيم الحركة
  const dt = Math.min(60, (now - this._last) / 16.6667);
  this._last = now;

  // بارالاكس لطيف باتجاه الماوس
  this.mx = this.lerp(this.mx, this.tx, 0.06);
  this.my = this.lerp(this.my, this.ty, 0.06);
  const nx = (this.mx - vw/2)/vw;
  const ny = (this.my - vh/2)/vh;

  // تخفيض تدريجي لشدة النبضة
  this.pulse *= 0.94;

  // ثوابت تأثير النبضة (نحسبها مرة لكل فريم)
  const rad2 = this.pulseRadius * this.pulseRadius;
  const maxInfluenceDist2 = rad2 * 4; // خارج 2x نصف القطر ما في تأثير

  for (const s of stars){
    // انزلاق تلقائي مستمر
    s.x = (s.x + s.vx * dt + vw) % vw;
    s.y = (s.y + s.vy * dt + vh) % vh;

    // موضع العرض + بارالاكس
    let px = s.x + nx * (1 - s.z) * this.parallax * vw;
    let py = s.y + ny * (1 - s.z) * this.parallax * vh;

    // === كتلة التأثير الأخف (بدل Math.exp) ===
    let tint = false;
    if (this.pulse > 0.001){
      const dx = px - this.px, dy = py - this.py;
      const d2 = dx*dx + dy*dy;

      if (d2 < maxInfluenceDist2){ // فقط القريبين من المؤشر
        // falloff أرخص من exp: 1 / (1 + d2 / (k))
        const influence = 1 / (1 + d2 / (rad2 * 0.75));
        const depth = (1 - s.z);
        const inv = 1 / Math.sqrt(d2 + 1e-6);

        const push  = this.pulse * 50 * influence * depth; // دفع للخارج
        const swirl = this.pulse * 18 * influence * depth; // لفّة خفيفة

        // مزج الدفع + اللفّة
        px += dx * inv * push + (-dy) * inv * swirl;
        py += dy * inv * push + ( dx) * inv * swirl;

        tint = influence > 0.22; // لمعان خفيف للقريب
      }
    }
    // === نهاية الكتلة ===

    // وميض + رسم
    const tw = (Math.sin(now*0.002 + s.phi) * 0.5 + 0.5) * this.twinkle;
    const alpha = Math.max(0, Math.min(1, s.a - tw));
    const rEff = s.r * (0.8 + (1 - s.z)*0.6) * (tint ? 1.25 : 1);

    ctx.globalAlpha = alpha;
    ctx.fillStyle = tint ? "#6fe7ff" : "#ffffff";
    ctx.beginPath();
    ctx.arc(px, py, rEff, 0, Math.PI*2);
    ctx.fill();
  }
  ctx.globalAlpha = 1;
}


  start() {
    const loop = (t) => {
      if (!this._hidden) {
        this.draw(t);
        this._raf = requestAnimationFrame(loop);
      }
    };
    this._raf = requestAnimationFrame(loop);
    document.addEventListener("visibilitychange", () => {
      this._hidden = document.hidden;
      if (!this._hidden && !this._raf) this.start();
      if (this._hidden && this._raf) {
        cancelAnimationFrame(this._raf);
        this._raf = null;
      }
    });
  }
}

const back = new Starfield(document.getElementById("stars-back"), {
  count: 520,
  speed: 0.014,
  parallax: 0.03,
  sizeRange: [0.8, 2.2],
  twinkle: 0.08,
});
const front = new Starfield(document.getElementById("stars-front"), {
  count: 520,
  speed: 0.014,
  parallax: 0.08,
  sizeRange: [0.5, 1.4],
  twinkle: 0.18,
});

back.start();
front.start();
